<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 <sec:http entry-point-ref="casEntryPoint" use-expressions="true">
        <sec:intercept-url pattern="/" access="permitAll"/>
        <sec:intercept-url pattern="/index.jsp" access="permitAll"/>
        <sec:intercept-url pattern="/cas-logout.jsp" access="permitAll"/>
        <sec:intercept-url pattern="/casfailed.jsp" access="permitAll"/>

        <sec:intercept-url pattern="/secure/extreme/**"
            access="hasRole('ROLE_SUPERVISOR')" />
        <sec:intercept-url pattern="/secure/**" access="hasRole('ROLE_USER')" />
        <sec:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
        <sec:custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <sec:custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <sec:custom-filter ref="casFilter" position="CAS_FILTER" />
        <sec:logout logout-success-url="/cas-logout.jsp"/>
    </sec:http>

    <sec:authentication-manager alias="authManager">
        <sec:authentication-provider ref="casAuthProvider" />
    </sec:authentication-manager>

    <sec:user-service id="userService">
        <sec:user name="rod" password="rod" authorities="ROLE_SUPERVISOR,ROLE_USER" />
        <sec:user name="dianne" password="dianne" authorities="ROLE_USER" />
        <sec:user name="scott" password="scott" authorities="ROLE_USER" />
    </sec:user-service>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
        p:filterProcessesUrl="/j_spring_cas_security_logout">
        <constructor-arg value="https://${cas.server.host}/cas/logout"/>
        <constructor-arg>
            <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </constructor-arg>
    </bean>

    <bean id="serviceProperties"
        class="org.springframework.security.cas.ServiceProperties"
        p:service="https://${cas.service.host}/cas-sample/j_spring_cas_security_check"
        p:authenticateAllArtifacts="true"/>
    <bean id="casEntryPoint"
        class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
        p:serviceProperties-ref="serviceProperties" p:loginUrl="https://${cas.server.host}/cas/login" />
    <bean id="casFilter"
        class="org.springframework.security.cas.web.CasAuthenticationFilter"
        p:authenticationManager-ref="authManager"
        p:serviceProperties-ref="serviceProperties"
        p:proxyGrantingTicketStorage-ref="pgtStorage"
        p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <property name="authenticationDetailsSource">
            <bean class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource"/>
        </property>
        <property name="authenticationFailureHandler">
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                p:defaultFailureUrl="/casfailed.jsp"/>
        </property>
    </bean>
    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>
    <bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
        p:serviceProperties-ref="serviceProperties"
        p:key="casAuthProviderKey">
        <property name="authenticationUserDetailsService">
            <bean
                class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <constructor-arg ref="userService" />
            </bean>
        </property>
        <property name="ticketValidator">
            <bean
                class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
                p:acceptAnyProxy="true"
                p:proxyCallbackUrl="https://${cas.service.host}/cas-sample/j_spring_cas_security_proxyreceptor"
                p:proxyGrantingTicketStorage-ref="pgtStorage">
                <constructor-arg value="https://${cas.server.host}/cas" />
            </bean>
        </property>
        <property name="statelessTicketCache">
            <bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
                <property name="cache">
                    <bean id="ehcache" class="net.sf.ehcache.Cache"
                      init-method="initialise"
                      destroy-method="dispose">
                        <constructor-arg value="casTickets"/>
                        <constructor-arg value="50"/>
                        <constructor-arg value="true"/>
                        <constructor-arg value="false"/>
                        <constructor-arg value="3600"/>
                        <constructor-arg value="900"/>
                        <property name="cacheManager">
                            <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!-- Configuration for the environment can be overriden by system properties -->
    <context:property-placeholder system-properties-mode="OVERRIDE" properties-ref="environment"/>
    <util:properties id="environment">
        <prop key="cas.service.host">localhost:8443</prop>
        <prop key="cas.server.host">localhost:9443</prop>
    </util:properties>
</beans>
